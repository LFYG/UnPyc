# [The "BSD licence"]
# Copyright (c) 2011 Alexander Ogorodnikov
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * The name of the author may not be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL Dmitri Kornev BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# ini-file for genCFG.py
#
# Format:
# "<unic_name>"; "statement" [ ; "statement"]*
# There's "statement" := ("<smth>" | "<smth>: {(<smth_in>)+}")
# The word "#block#" is reserved by recursive insert statements (by default: "#block#" := ("pass" | "return"))
#
# For example:
# "if+else"; "if True: {#block#}"; "else: {#block#}"


# if
"if"; "if 1: {print 1}"
# if+else
"if+else"; "if 1: {#block#}"; "else: {#block#}"
# if+elif
"if+elif"; "if 1: {#block#}"; "elif 1: {#block#}"
# if+elif+else
"if+elif+else"; "if 1: {#block#}"; "elif 1: {#block#}"; "else: {#block#}"
# while
"while"; "while 1: {#block#}"
# while+else
"while+else"; "while 1: {#block#}"; "else: {#block#}"
# for
"for"; "for i in range(3): {#block#}"
# for+else
"for+else"; "for i in range(3): {#block#}"; "else: {#block#}"
# try+except
"try+except"; "try: {#block#}"; "except: {#block#}"
# try+finally
"try+finally"; "try: {#block#}"; "finally: {#block#}"
# try+except+else
"try+except+else"; "try: {#block#}"; "except: {#block#}"; "else: {#block#}"
# try+except+finally
"try+except+finally"; "try: {#block#}"; "except: {#block#}"; "finally: {#block#}"
# try+except+else+finally
"try+except+else+finally"; "try: {#block#}"; "except: {#block#}"; "else: {#block#}"; "finally: {#block#}"
# with
"with"; "with 1: {#block#; #block#; print 1}"

# #block#N
"#block#1"; "print 2"; "if True: {isBlock=False; print isBlock}"
"#block#5"; "raise NameError('YourNameIncorrect')"